-- walmart_queries.sql
-- Author: Nandini Naik
-- Project: Walmart Sales Data Analysis using MySQL
-- Description: Data Cleaning + Business Problem Solving

/* ==========================
   üîπ DATA CLEANING STEPS
   ========================== */

-- 1. Remove $ from unit_price and convert to DECIMAL
UPDATE walmart 
SET unit_price = REPLACE(unit_price, "$", "");
ALTER TABLE walmart 
MODIFY unit_price DECIMAL(10,2);

-- 2. Convert date column from text to DATE
UPDATE walmart 
SET date = STR_TO_DATE(date, "%d/%m/%y");
ALTER TABLE walmart 
MODIFY COLUMN date DATE;

-- 3. Convert time column from text to TIME
ALTER TABLE walmart 
MODIFY COLUMN time TIME;


/* ==========================
   üîπ BUSINESS QUERIES
   ========================== */

-- 1Ô∏è‚É£ Find different payment methods, number of transactions, and quantity sold
SELECT payment_method, 
       COUNT(*) AS no_of_transactions, 
       SUM(quantity) AS quantity_sold
FROM walmart
GROUP BY 1;

-- 2Ô∏è‚É£ Identify the highest-rated category in each branch
WITH high_rate AS (
    SELECT branch,
           category,
           ROUND(AVG(rating),2) AS avg_rating,
           DENSE_RANK() OVER(PARTITION BY branch ORDER BY ROUND(AVG(rating),2) DESC) AS rnk
    FROM walmart
    GROUP BY 1,2
)
SELECT branch, category, avg_rating
FROM high_rate
WHERE rnk = 1;

-- 3Ô∏è‚É£ Identify the busiest day for each branch based on number of transactions
WITH transaction_rank AS (
    SELECT date,
           branch,
           COUNT(*) AS no_of_transaction,
           DENSE_RANK() OVER(PARTITION BY branch ORDER BY COUNT(*) DESC) AS rnk
    FROM walmart
    GROUP BY 1,2
)
SELECT DAYNAME(date) AS busiest_day, branch, no_of_transaction
FROM transaction_rank
WHERE rnk = 1;

-- 4Ô∏è‚É£ Determine the average, minimum, and maximum rating of categories for each city
SELECT city,
       category,
       ROUND(AVG(rating),2) AS avg_rating,
       MAX(rating) AS max_rating,
       MIN(rating) AS min_rating 
FROM walmart
GROUP BY 1,2
ORDER BY city;

-- 5Ô∏è‚É£ Calculate the total profit for each category
SELECT category,
       ROUND(SUM(unit_price*quantity*profit_margin),2) AS total_profit
FROM walmart
GROUP BY 1
ORDER BY total_profit DESC;

-- 6Ô∏è‚É£ Determine the most common payment method for each branch
WITH payment_rnk AS (
    SELECT branch,
           payment_method,
           COUNT(*) AS payment_count,
           DENSE_RANK() OVER(PARTITION BY branch ORDER BY COUNT(*) DESC) AS rnk
    FROM walmart
    GROUP BY 1,2
)
SELECT branch, payment_method AS common_payment_method
FROM payment_rnk 
WHERE rnk = 1;

-- 7Ô∏è‚É£ Categorize sales into Morning, Afternoon, and Evening shifts
WITH time_shift AS (
    SELECT time,
           CASE 
                WHEN HOUR(time) < 12 THEN "Morning"
                WHEN HOUR(time) BETWEEN 12 AND 17 THEN "Afternoon"
                WHEN HOUR(time) > 17 THEN "Evening"
           END AS shift
    FROM walmart
)
SELECT shift, COUNT(*) AS no_of_sales 
FROM time_shift
GROUP BY 1;

-- 8Ô∏è‚É£ Identify the 5 branches with the highest revenue decrease ratio (2022 vs 2023)
WITH sale_yr AS (
    SELECT branch,
           YEAR(date) AS year_of_sale,
           SUM(unit_price*quantity) AS revenue 
    FROM walmart
    WHERE YEAR(date) IN (2022,2023)
    GROUP BY 1,2
),
lag_value AS (
    SELECT branch,
           revenue AS revenue_2023,
           LAG(revenue,1) OVER(PARTITION BY branch ORDER BY year_of_sale) AS revenue_2022,
           ROUND((revenue - LAG(revenue,1) OVER(PARTITION BY branch ORDER BY year_of_sale)) 
                 / LAG(revenue,1) OVER(PARTITION BY branch ORDER BY year_of_sale) * 100, 2) AS revenue_decrease_ratio
    FROM sale_yr
)
SELECT branch, revenue_2023, revenue_2022, revenue_decrease_ratio
FROM lag_value
WHERE revenue_decrease_ratio IS NOT NULL
ORDER BY revenue_decrease_ratio ASC
LIMIT 5;
